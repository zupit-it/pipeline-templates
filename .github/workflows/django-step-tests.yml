name: Run Django tests

on:
  workflow_call:
    inputs:
      RUN_ON:
        required: false
        type: string
        default: "zupit-agents"
      RUNNERS_CONTAINER_GROUP:
        required: false
        type: string
        default: "Container"
      WORKING_DIRECTORY:
        required: true
        type: string
      PYTHON_IMAGE:
        required: true
        type: string
      COVERAGE_ARTIFACT_NAME:
        required: true
        type: string
      RUN:
        required: false
        type: boolean
        default: true
      SETUP_COMMANDS:
        required: false
        type: string
        default: ""
      ENABLE_LFS:
        required: false
        type: boolean
        default: false

      # Workaround for https://github.com/actions/checkout/issues/1169
      LFS_REPO_PATH:
        required: false
        type: string
        default: ""

      COVERAGE_THRESHOLD:
        required: false
        type: number
        default: 50

env: "${{secrets}}"

jobs:
  django-tests:
    if: ${{ inputs.RUN }}
    runs-on:
      labels: ${{ inputs.RUN_ON }}
      group: ${{ inputs.RUNNERS_CONTAINER_GROUP }}
    container: ${{ inputs.PYTHON_IMAGE }}

    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: django-runner
          POSTGRES_PASSWORD: django-runner
          POSTGRES_DB: django
      redis:
        image: redis

    steps:
      - name: Install prerequisites
        if: ${{ inputs.ENABLE_LFS == true }}
        run: apt-get update && apt-get install -y git-lfs
      - uses: actions/checkout@v4
        if: ${{ inputs.ENABLE_LFS == true }}
        with:
          lfs: "true"
      - uses: actions/checkout@v4
        if: ${{ inputs.ENABLE_LFS == false }}
      - run: git config --global --add safe.directory ${{ inputs.LFS_REPO_PATH }}
        if: ${{ inputs.ENABLE_LFS == true }}
      - name: Checkout LFS objects
        if: ${{ inputs.ENABLE_LFS == true }}
        run: git lfs pull
      - name: Setup
        run: ${{ inputs.SETUP_COMMANDS }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Copy env file
        run: cp .env.github .env
      - name: Migrate django DB
        run: python manage.py migrate
      - name: Run django tests
        run: |
          coverage erase
          coverage run --source='.' manage.py test --noinput
          coverage xml -i -o coverage-reports/coverage-django.xml
          coverage report --fail-under ${{ inputs.COVERAGE_THRESHOLD }}

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.COVERAGE_ARTIFACT_NAME }}
          path: ${{ inputs.WORKING_DIRECTORY }}/coverage-reports/coverage-django.xml
          retention-days: 1
